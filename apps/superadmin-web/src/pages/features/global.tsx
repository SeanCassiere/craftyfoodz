import { useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { RefreshCcw } from "lucide-react";

import { Icons } from "@/components/icons";
import { ContentToContainer } from "@/components/layout/content-to-container";
import { MainContainer } from "@/components/layout/main-container";
import { SideNavigation } from "@/components/side-navigation";
import { SiteHeader } from "@/components/site-header";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import { UI_CONFIG } from "@/lib/config";
import { fontSans } from "@/lib/fonts";
import { cn } from "@/lib/utils";

type FeatureConfig = {
  id: string;
  configuration: string;
  is_active: boolean;
};
const CURRENT_FEATURES: FeatureConfig[] = [
  {
    id: "MENU_ITEM_IMAGES",
    configuration: "",
    is_active: true,
  },
  {
    id: "MENU_ITEM_DYNAMIC_FIELD",
    configuration: "",
    is_active: true,
  },
];
const ALL_FEATURES: FeatureConfig[] = [
  ...CURRENT_FEATURES,
  {
    id: "RESTAURANT_KITCHEN_VIEW",
    configuration: "",
    is_active: false,
  },
];

const GlobalFeaturesPage: NextPage = () => {
  const router = useRouter();

  const tab =
    router.query?.tab && typeof router.query.tab === "string"
      ? router.query?.tab
      : "restaurants";

  return (
    <>
      <Head>
        <title>{`Global | Features - ${UI_CONFIG.company_name}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <MainContainer>
        <SiteHeader pathname={router.pathname} />
        <ContentToContainer>
          <div className="grid grid-cols-12">
            <div className="col-span-12 py-4 md:col-span-3 md:px-2">
              <SideNavigation title="Features">
                <SideNavigation.Item href="/features/global" active>
                  Global
                </SideNavigation.Item>
                <SideNavigation.Item href="/features/restaurant-specific">
                  Restaurant specific
                </SideNavigation.Item>
              </SideNavigation>
            </div>
            <div className="col-span-12 pb-4 pt-6 md:col-span-9 md:pt-4">
              <h2 className="mb-4 text-lg font-medium leading-3 transition sm:flex">
                Global
              </h2>
              <p className="mb-6 text-sm">
                Enable and manage global features for {UI_CONFIG.company_name}.
              </p>
              <Tabs
                value={tab}
                onValueChange={(value) => {
                  router.push("/features/global?tab=" + value, undefined, {
                    shallow: true,
                  });
                }}
              >
                <TabsList>
                  <TabsTrigger value="restaurants">Restaurants</TabsTrigger>
                  <TabsTrigger value="visitors">Visitors</TabsTrigger>
                  <TabsTrigger value="admin">Administrators</TabsTrigger>
                </TabsList>
                <TabsContent value="restaurants">
                  <FeaturePanel
                    title="Restaurant features"
                    description="Manage and maintain the features in use on the restaurants web portal."
                    audience="restaurants"
                  />
                </TabsContent>
                <TabsContent value="visitors">
                  <FeaturePanel
                    title="Visitor features"
                    description="Manage and maintain the features in use on the visitors web portal."
                    audience="visitors"
                  />
                </TabsContent>
                <TabsContent value="admin">
                  <FeaturePanel
                    title="Administrator features"
                    description="Manage and maintain the features in use on this web portal."
                    audience="admin"
                  />
                </TabsContent>
              </Tabs>
            </div>
          </div>
        </ContentToContainer>
      </MainContainer>
    </>
  );
};

export default GlobalFeaturesPage;

const FeaturePanel = (props: {
  title: string;
  description: string;
  audience: "restaurants" | "visitors" | "admin";
}) => {
  const features = props.audience !== "admin" ? CURRENT_FEATURES : [];
  const allFeatures = props.audience !== "admin" ? ALL_FEATURES : [];

  const isFeaturesMissing = (() => {
    return allFeatures.reduce((prev, current) => {
      if (prev) return true;

      if (features.find((f) => f.id === current.id)) {
        return false;
      }

      return true;
    }, false);
  })();

  const handleSync = () => {
    // get items in all_features that are not in current_features
    const missingFeatures = allFeatures.filter((f) => {
      return !features.find((cf) => cf.id === f.id);
    });
    console.log("missing features", missingFeatures);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>{props.title}</CardTitle>
        <CardDescription>{props.description}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-2">
        <div>
          <Button disabled={!isFeaturesMissing} size="sm" onClick={handleSync}>
            <RefreshCcw className="mr-2 h-4 w-4" />
            Sync missing
          </Button>
        </div>
        <section className="space-y-2 pt-2">
          <h4 className="w-full select-none rounded border bg-gray-100 p-2 text-sm">
            {props.title}
          </h4>
          <div className="flex flex-col divide-y">
            {features.map((feature, idx) => {
              return (
                <FeatureItem key={feature.id} idx={idx} feature={feature} />
              );
            })}
            {features.length === 0 && (
              <p className="px-2 py-1.5 text-sm">
                {"We've got no feature configurations to show you here."}
              </p>
            )}
          </div>
        </section>
      </CardContent>
    </Card>
  );
};

const FeatureItem = ({
  idx,
  feature,
}: {
  idx: number;
  feature: FeatureConfig;
}) => {
  const [isActive, setIsActive] = useState(feature.is_active);

  const handleAcceptStatusFlip = () => {
    setIsActive((prev) => !prev);
  };

  return (
    <div className="flex items-center px-2 py-1.5 text-sm">
      <div className="flex flex-1 items-start">
        <span className="w-5">{idx + 1}.</span>
        <div>
          <span className="text-xs">{feature.id}</span>
        </div>
      </div>
      <div>
        <AlertDialog>
          <AlertDialogTrigger asChild>
            <Button size="sm" variant="ghost">
              {isActive ? (
                <Icons.cloud className="h-4 w-4" />
              ) : (
                <Icons.cloudOff className="h-4 w-4" />
              )}
            </Button>
          </AlertDialogTrigger>
          <AlertDialogContent className={cn("font-sans", fontSans.variable)}>
            <AlertDialogHeader>
              <AlertDialogTitle>Are you sure absolutely sure?</AlertDialogTitle>
              <AlertDialogDescription>
                This is a global feature. This will turn the feature{" "}
                <span className="font-medium">{isActive ? "OFF" : "ON"}</span>{" "}
                in the entire system.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction onClick={handleAcceptStatusFlip}>
                Continue
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>

        <Button size="sm" variant="ghost">
          <Icons.pencil className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
};
